# Task ID: 4
# Title: Implement Authentication Service
# Status: pending
# Dependencies: 2, 3
# Priority: high
# Description: Create the authentication service to handle user login, tenant selection, password validation, and integration with the external authentication system.
# Details:
1. Create an authentication service with the following methods:
```typescript
class AuthService {
  // Check if username exists and determine if single or multi-tenant
  async validateUsername(username: string): Promise<{valid: boolean, multiTenant: boolean}> {...}
  
  // Get available tenants for a user
  async getTenants(username: string): Promise<Tenant[]> {...}
  
  // Authenticate user with username, password, and optional tenantId
  async login(username: string, password: string, tenantId?: string): Promise<User> {...}
  
  // Check if password reset is required (not changed in 6 months)
  async checkPasswordResetRequired(userId: string): Promise<boolean> {...}
  
  // Reset password with validation
  async resetPassword(userId: string, currentPassword: string, newPassword: string): Promise<boolean> {...}
  
  // Store authentication tokens securely
  private storeTokens(tokens: AuthTokens): Promise<void> {...}
  
  // Get stored tokens
  async getTokens(): Promise<AuthTokens | null> {...}
  
  // Clear stored tokens on logout
  async logout(): Promise<void> {...}
}
```

2. Implement secure storage for authentication tokens using react-native-keychain
3. Create API client for external authentication system integration
4. Implement password complexity validation logic
5. Create authentication context provider for React components
6. Implement automatic token refresh mechanism
7. Handle authentication errors and provide meaningful messages

# Test Strategy:
1. Unit test all authentication service methods
2. Mock external authentication API for testing
3. Test token storage and retrieval
4. Verify password complexity validation logic
5. Test multi-tenant vs. single-tenant authentication flows
6. Test password reset flow and validation
7. Verify error handling for various authentication failure scenarios
8. Test token refresh mechanism
9. Verify secure storage of credentials
