# Task ID: 3
# Title: Create Authentication Workflow UI
# Status: pending
# Dependencies: 1
# Priority: high
# Description: Implement the authentication screens and workflow, including username input, tenant selection for multi-tenant users, password input, and password reset functionality.
# Details:
1. Create the following authentication screens with consistent two-section layout:
   - Username Input Screen
   - Tenant Selection Screen (for multi-tenant users)
   - Password Input Screen
   - Password Reset Screen

2. Implement form validation:
   - Username validation
   - Password validation with complexity rules (for reset)
   - Required field validation

3. Create UI components:
```typescript
// Example component structure
const UsernameScreen = () => {
  const [username, setUsername] = useState('');
  const [error, setError] = useState('');
  
  const handleContinue = () => {
    if (!username.trim()) {
      setError('Username is required');
      return;
    }
    // Navigate to next screen (tenant selection or password)
  };
  
  return (
    <AuthLayout title="Login">
      <TextInput
        value={username}
        onChangeText={setUsername}
        placeholder="Username"
        autoCapitalize="none"
      />
      {error ? <Text style={styles.error}>{error}</Text> : null}
      <Button title="Continue" onPress={handleContinue} />
    </AuthLayout>
  );
};
```

4. Implement navigation flow between authentication screens
5. Create password reset flow with 6-month expiration check
6. Design and implement password complexity validation for reset screen

# Test Strategy:
1. Unit test each authentication screen component
2. Test form validation logic for all inputs
3. Verify navigation flow between screens works correctly
4. Test multi-tenant vs. single-tenant flow differences
5. Verify password reset flow and complexity validation
6. Test error handling and display
7. Perform usability testing with different input scenarios
8. Verify UI matches the specified two-section layout
